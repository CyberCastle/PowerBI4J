/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Power BI available feature
 */
@ApiModel(description = "Power BI available feature")
@JsonPropertyOrder({ AvailableFeature.JSON_PROPERTY_NAME, AvailableFeature.JSON_PROPERTY_STATE,
        AvailableFeature.JSON_PROPERTY_EXTENDED_STATE, AvailableFeature.JSON_PROPERTY_ADDITIONAL_INFO })

public class AvailableFeature {
    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    /**
     * The feature state
     */
    public enum StateEnum {
        ENABLED("Enabled"),

        DISABLED("Disabled");

        private String value;

        StateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static StateEnum fromValue(String value) {
            for (StateEnum b : StateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_STATE = "state";
    private StateEnum state;

    /**
     * The feature extended state
     */
    public enum ExtendedStateEnum {
        ENABLED("Enabled"),

        DISABLEDBYADMIN("DisabledByAdmin"),

        USERNOTLICENSED("UserNotLicensed");

        private String value;

        ExtendedStateEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static ExtendedStateEnum fromValue(String value) {
            for (ExtendedStateEnum b : ExtendedStateEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_EXTENDED_STATE = "extendedState";
    private ExtendedStateEnum extendedState;

    public static final String JSON_PROPERTY_ADDITIONAL_INFO = "additionalInfo";
    private AdditionalFeatureInfo additionalInfo;

    public AvailableFeature name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The feature name
     * 
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The feature name")
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public AvailableFeature state(StateEnum state) {

        this.state = state;
        return this;
    }

    /**
     * The feature state
     * 
     * @return state
     **/
    @ApiModelProperty(required = true, value = "The feature state")
    @JsonProperty(JSON_PROPERTY_STATE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public StateEnum getState() {
        return state;
    }

    public void setState(StateEnum state) {
        this.state = state;
    }

    public AvailableFeature extendedState(ExtendedStateEnum extendedState) {

        this.extendedState = extendedState;
        return this;
    }

    /**
     * The feature extended state
     * 
     * @return extendedState
     **/
    @ApiModelProperty(required = true, value = "The feature extended state")
    @JsonProperty(JSON_PROPERTY_EXTENDED_STATE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public ExtendedStateEnum getExtendedState() {
        return extendedState;
    }

    public void setExtendedState(ExtendedStateEnum extendedState) {
        this.extendedState = extendedState;
    }

    public AvailableFeature additionalInfo(AdditionalFeatureInfo additionalInfo) {

        this.additionalInfo = additionalInfo;
        return this;
    }

    /**
     * Get additionalInfo
     * 
     * @return additionalInfo
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "")
    @JsonProperty(JSON_PROPERTY_ADDITIONAL_INFO)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public AdditionalFeatureInfo getAdditionalInfo() {
        return additionalInfo;
    }

    public void setAdditionalInfo(AdditionalFeatureInfo additionalInfo) {
        this.additionalInfo = additionalInfo;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AvailableFeature availableFeature = (AvailableFeature) o;
        return Objects.equals(this.name, availableFeature.name) && Objects.equals(this.state, availableFeature.state)
                && Objects.equals(this.extendedState, availableFeature.extendedState)
                && Objects.equals(this.additionalInfo, availableFeature.additionalInfo);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, state, extendedState, additionalInfo);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class AvailableFeature {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    state: ").append(toIndentedString(state)).append("\n");
        sb.append("    extendedState: ").append(toIndentedString(extendedState)).append("\n");
        sb.append("    additionalInfo: ").append(toIndentedString(additionalInfo)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
