/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A relationship between tables in a dataset
 */
@ApiModel(description = "A relationship between tables in a dataset")
@JsonPropertyOrder({ Relationship.JSON_PROPERTY_NAME, Relationship.JSON_PROPERTY_CROSS_FILTERING_BEHAVIOR,
        Relationship.JSON_PROPERTY_FROM_TABLE, Relationship.JSON_PROPERTY_FROM_COLUMN,
        Relationship.JSON_PROPERTY_TO_TABLE, Relationship.JSON_PROPERTY_TO_COLUMN })

public class Relationship {
    public static final String JSON_PROPERTY_NAME = "name";
    private String name;

    /**
     * The filter direction of the relationship
     */
    public enum CrossFilteringBehaviorEnum {
        ONEDIRECTION("OneDirection"),

        BOTHDIRECTIONS("BothDirections"),

        AUTOMATIC("Automatic");

        private String value;

        CrossFilteringBehaviorEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CrossFilteringBehaviorEnum fromValue(String value) {
            for (CrossFilteringBehaviorEnum b : CrossFilteringBehaviorEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CROSS_FILTERING_BEHAVIOR = "crossFilteringBehavior";
    private CrossFilteringBehaviorEnum crossFilteringBehavior = CrossFilteringBehaviorEnum.ONEDIRECTION;

    public static final String JSON_PROPERTY_FROM_TABLE = "fromTable";
    private String fromTable;

    public static final String JSON_PROPERTY_FROM_COLUMN = "fromColumn";
    private String fromColumn;

    public static final String JSON_PROPERTY_TO_TABLE = "toTable";
    private String toTable;

    public static final String JSON_PROPERTY_TO_COLUMN = "toColumn";
    private String toColumn;

    public Relationship name(String name) {

        this.name = name;
        return this;
    }

    /**
     * The relationship name and identifier
     * 
     * @return name
     **/
    @ApiModelProperty(required = true, value = "The relationship name and identifier")
    @JsonProperty(JSON_PROPERTY_NAME)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Relationship crossFilteringBehavior(CrossFilteringBehaviorEnum crossFilteringBehavior) {

        this.crossFilteringBehavior = crossFilteringBehavior;
        return this;
    }

    /**
     * The filter direction of the relationship
     * 
     * @return crossFilteringBehavior
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The filter direction of the relationship")
    @JsonProperty(JSON_PROPERTY_CROSS_FILTERING_BEHAVIOR)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public CrossFilteringBehaviorEnum getCrossFilteringBehavior() {
        return crossFilteringBehavior;
    }

    public void setCrossFilteringBehavior(CrossFilteringBehaviorEnum crossFilteringBehavior) {
        this.crossFilteringBehavior = crossFilteringBehavior;
    }

    public Relationship fromTable(String fromTable) {

        this.fromTable = fromTable;
        return this;
    }

    /**
     * The name of the foreign key table
     * 
     * @return fromTable
     **/
    @ApiModelProperty(required = true, value = "The name of the foreign key table")
    @JsonProperty(JSON_PROPERTY_FROM_TABLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFromTable() {
        return fromTable;
    }

    public void setFromTable(String fromTable) {
        this.fromTable = fromTable;
    }

    public Relationship fromColumn(String fromColumn) {

        this.fromColumn = fromColumn;
        return this;
    }

    /**
     * The name of the foreign key column
     * 
     * @return fromColumn
     **/
    @ApiModelProperty(required = true, value = "The name of the foreign key column")
    @JsonProperty(JSON_PROPERTY_FROM_COLUMN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getFromColumn() {
        return fromColumn;
    }

    public void setFromColumn(String fromColumn) {
        this.fromColumn = fromColumn;
    }

    public Relationship toTable(String toTable) {

        this.toTable = toTable;
        return this;
    }

    /**
     * The name of the primary key table
     * 
     * @return toTable
     **/
    @ApiModelProperty(required = true, value = "The name of the primary key table")
    @JsonProperty(JSON_PROPERTY_TO_TABLE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getToTable() {
        return toTable;
    }

    public void setToTable(String toTable) {
        this.toTable = toTable;
    }

    public Relationship toColumn(String toColumn) {

        this.toColumn = toColumn;
        return this;
    }

    /**
     * The name of the primary key column
     * 
     * @return toColumn
     **/
    @ApiModelProperty(required = true, value = "The name of the primary key column")
    @JsonProperty(JSON_PROPERTY_TO_COLUMN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getToColumn() {
        return toColumn;
    }

    public void setToColumn(String toColumn) {
        this.toColumn = toColumn;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Relationship relationship = (Relationship) o;
        return Objects.equals(this.name, relationship.name)
                && Objects.equals(this.crossFilteringBehavior, relationship.crossFilteringBehavior)
                && Objects.equals(this.fromTable, relationship.fromTable)
                && Objects.equals(this.fromColumn, relationship.fromColumn)
                && Objects.equals(this.toTable, relationship.toTable)
                && Objects.equals(this.toColumn, relationship.toColumn);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, crossFilteringBehavior, fromTable, fromColumn, toTable, toColumn);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Relationship {\n");
        sb.append("    name: ").append(toIndentedString(name)).append("\n");
        sb.append("    crossFilteringBehavior: ").append(toIndentedString(crossFilteringBehavior)).append("\n");
        sb.append("    fromTable: ").append(toIndentedString(fromTable)).append("\n");
        sb.append("    fromColumn: ").append(toIndentedString(fromColumn)).append("\n");
        sb.append("    toTable: ").append(toIndentedString(toTable)).append("\n");
        sb.append("    toColumn: ").append(toIndentedString(toColumn)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
