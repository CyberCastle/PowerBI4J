/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A Power BI dashboard
 */
@ApiModel(description = "A Power BI dashboard")
@JsonPropertyOrder({ Dashboard.JSON_PROPERTY_ID, Dashboard.JSON_PROPERTY_DISPLAY_NAME,
        Dashboard.JSON_PROPERTY_IS_READ_ONLY, Dashboard.JSON_PROPERTY_EMBED_URL, Dashboard.JSON_PROPERTY_TILES })

public class Dashboard {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_DISPLAY_NAME = "displayName";
    private String displayName;

    public static final String JSON_PROPERTY_IS_READ_ONLY = "isReadOnly";
    private Boolean isReadOnly;

    public static final String JSON_PROPERTY_EMBED_URL = "embedUrl";
    private String embedUrl;

    public static final String JSON_PROPERTY_TILES = "tiles";
    private List<Tile> tiles = null;

    public Dashboard id(UUID id) {

        this.id = id;
        return this;
    }

    /**
     * The dashboard id
     * 
     * @return id
     **/
    @ApiModelProperty(required = true, value = "The dashboard id")
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public Dashboard displayName(String displayName) {

        this.displayName = displayName;
        return this;
    }

    /**
     * The dashboard display name
     * 
     * @return displayName
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The dashboard display name")
    @JsonProperty(JSON_PROPERTY_DISPLAY_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDisplayName() {
        return displayName;
    }

    public void setDisplayName(String displayName) {
        this.displayName = displayName;
    }

    public Dashboard isReadOnly(Boolean isReadOnly) {

        this.isReadOnly = isReadOnly;
        return this;
    }

    /**
     * Is ReadOnly dashboard
     * 
     * @return isReadOnly
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Is ReadOnly dashboard")
    @JsonProperty(JSON_PROPERTY_IS_READ_ONLY)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public Boolean getIsReadOnly() {
        return isReadOnly;
    }

    public void setIsReadOnly(Boolean isReadOnly) {
        this.isReadOnly = isReadOnly;
    }

    public Dashboard embedUrl(String embedUrl) {

        this.embedUrl = embedUrl;
        return this;
    }

    /**
     * The dashboard embed url
     * 
     * @return embedUrl
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The dashboard embed url")
    @JsonProperty(JSON_PROPERTY_EMBED_URL)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getEmbedUrl() {
        return embedUrl;
    }

    public void setEmbedUrl(String embedUrl) {
        this.embedUrl = embedUrl;
    }

    public Dashboard tiles(List<Tile> tiles) {

        this.tiles = tiles;
        return this;
    }

    public Dashboard addTilesItem(Tile tilesItem) {
        if (this.tiles == null) {
            this.tiles = new ArrayList<>();
        }
        this.tiles.add(tilesItem);
        return this;
    }

    /**
     * The tiles that belong to the dashboard.
     * 
     * @return tiles
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The tiles that belong to the dashboard.")
    @JsonProperty(JSON_PROPERTY_TILES)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public List<Tile> getTiles() {
        return tiles;
    }

    public void setTiles(List<Tile> tiles) {
        this.tiles = tiles;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Dashboard dashboard = (Dashboard) o;
        return Objects.equals(this.id, dashboard.id) && Objects.equals(this.displayName, dashboard.displayName)
                && Objects.equals(this.isReadOnly, dashboard.isReadOnly)
                && Objects.equals(this.embedUrl, dashboard.embedUrl) && Objects.equals(this.tiles, dashboard.tiles);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, displayName, isReadOnly, embedUrl, tiles);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class Dashboard {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
        sb.append("    isReadOnly: ").append(toIndentedString(isReadOnly)).append("\n");
        sb.append("    embedUrl: ").append(toIndentedString(embedUrl)).append("\n");
        sb.append("    tiles: ").append(toIndentedString(tiles)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
