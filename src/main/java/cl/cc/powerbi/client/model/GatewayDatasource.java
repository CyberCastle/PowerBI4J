/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.util.Objects;
import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * A Power BI gateway datasource
 */
@ApiModel(description = "A Power BI gateway datasource")
@JsonPropertyOrder({ GatewayDatasource.JSON_PROPERTY_ID, GatewayDatasource.JSON_PROPERTY_GATEWAY_ID,
        GatewayDatasource.JSON_PROPERTY_DATASOURCE_NAME, GatewayDatasource.JSON_PROPERTY_DATASOURCE_TYPE,
        GatewayDatasource.JSON_PROPERTY_CONNECTION_DETAILS, GatewayDatasource.JSON_PROPERTY_CREDENTIAL_TYPE })

public class GatewayDatasource {
    public static final String JSON_PROPERTY_ID = "id";
    private UUID id;

    public static final String JSON_PROPERTY_GATEWAY_ID = "gatewayId";
    private UUID gatewayId;

    public static final String JSON_PROPERTY_DATASOURCE_NAME = "datasourceName";
    private String datasourceName;

    public static final String JSON_PROPERTY_DATASOURCE_TYPE = "datasourceType";
    private String datasourceType;

    public static final String JSON_PROPERTY_CONNECTION_DETAILS = "connectionDetails";
    private String connectionDetails;

    /**
     * Type of the datasoruce credentials
     */
    public enum CredentialTypeEnum {
        BASIC("Basic"),

        WINDOWS("Windows"),

        ANONYMOUS("Anonymous"),

        OAUTH2("OAuth2"),

        KEY("Key");

        private String value;

        CredentialTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static CredentialTypeEnum fromValue(String value) {
            for (CredentialTypeEnum b : CredentialTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_CREDENTIAL_TYPE = "credentialType";
    private CredentialTypeEnum credentialType;

    public GatewayDatasource id(UUID id) {

        this.id = id;
        return this;
    }

    /**
     * The unique id for this datasource
     * 
     * @return id
     **/
    @ApiModelProperty(required = true, value = "The unique id for this datasource")
    @JsonProperty(JSON_PROPERTY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UUID getId() {
        return id;
    }

    public void setId(UUID id) {
        this.id = id;
    }

    public GatewayDatasource gatewayId(UUID gatewayId) {

        this.gatewayId = gatewayId;
        return this;
    }

    /**
     * The associated gateway id
     * 
     * @return gatewayId
     **/
    @ApiModelProperty(required = true, value = "The associated gateway id")
    @JsonProperty(JSON_PROPERTY_GATEWAY_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UUID getGatewayId() {
        return gatewayId;
    }

    public void setGatewayId(UUID gatewayId) {
        this.gatewayId = gatewayId;
    }

    public GatewayDatasource datasourceName(String datasourceName) {

        this.datasourceName = datasourceName;
        return this;
    }

    /**
     * The name of the datasource
     * 
     * @return datasourceName
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The name of the datasource")
    @JsonProperty(JSON_PROPERTY_DATASOURCE_NAME)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDatasourceName() {
        return datasourceName;
    }

    public void setDatasourceName(String datasourceName) {
        this.datasourceName = datasourceName;
    }

    public GatewayDatasource datasourceType(String datasourceType) {

        this.datasourceType = datasourceType;
        return this;
    }

    /**
     * The type of the datasource
     * 
     * @return datasourceType
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "The type of the datasource")
    @JsonProperty(JSON_PROPERTY_DATASOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getDatasourceType() {
        return datasourceType;
    }

    public void setDatasourceType(String datasourceType) {
        this.datasourceType = datasourceType;
    }

    public GatewayDatasource connectionDetails(String connectionDetails) {

        this.connectionDetails = connectionDetails;
        return this;
    }

    /**
     * Connection details in json format
     * 
     * @return connectionDetails
     **/
    @javax.annotation.Nullable
    @ApiModelProperty(value = "Connection details in json format")
    @JsonProperty(JSON_PROPERTY_CONNECTION_DETAILS)
    @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

    public String getConnectionDetails() {
        return connectionDetails;
    }

    public void setConnectionDetails(String connectionDetails) {
        this.connectionDetails = connectionDetails;
    }

    public GatewayDatasource credentialType(CredentialTypeEnum credentialType) {

        this.credentialType = credentialType;
        return this;
    }

    /**
     * Type of the datasoruce credentials
     * 
     * @return credentialType
     **/
    @ApiModelProperty(required = true, value = "Type of the datasoruce credentials")
    @JsonProperty(JSON_PROPERTY_CREDENTIAL_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public CredentialTypeEnum getCredentialType() {
        return credentialType;
    }

    public void setCredentialType(CredentialTypeEnum credentialType) {
        this.credentialType = credentialType;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GatewayDatasource gatewayDatasource = (GatewayDatasource) o;
        return Objects.equals(this.id, gatewayDatasource.id)
                && Objects.equals(this.gatewayId, gatewayDatasource.gatewayId)
                && Objects.equals(this.datasourceName, gatewayDatasource.datasourceName)
                && Objects.equals(this.datasourceType, gatewayDatasource.datasourceType)
                && Objects.equals(this.connectionDetails, gatewayDatasource.connectionDetails)
                && Objects.equals(this.credentialType, gatewayDatasource.credentialType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, gatewayId, datasourceName, datasourceType, connectionDetails, credentialType);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class GatewayDatasource {\n");
        sb.append("    id: ").append(toIndentedString(id)).append("\n");
        sb.append("    gatewayId: ").append(toIndentedString(gatewayId)).append("\n");
        sb.append("    datasourceName: ").append(toIndentedString(datasourceName)).append("\n");
        sb.append("    datasourceType: ").append(toIndentedString(datasourceType)).append("\n");
        sb.append("    connectionDetails: ").append(toIndentedString(connectionDetails)).append("\n");
        sb.append("    credentialType: ").append(toIndentedString(credentialType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
