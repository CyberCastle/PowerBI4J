/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.UUID;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Power BI embed token
 */
@ApiModel(description = "Power BI embed token")
@JsonPropertyOrder({ EmbedToken.JSON_PROPERTY_TOKEN, EmbedToken.JSON_PROPERTY_TOKEN_ID,
        EmbedToken.JSON_PROPERTY_EXPIRATION })

public class EmbedToken {
    public static final String JSON_PROPERTY_TOKEN = "token";
    private String token;

    public static final String JSON_PROPERTY_TOKEN_ID = "tokenId";
    private UUID tokenId;

    public static final String JSON_PROPERTY_EXPIRATION = "expiration";
    private OffsetDateTime expiration;

    public EmbedToken token(String token) {

        this.token = token;
        return this;
    }

    /**
     * Embed token
     * 
     * @return token
     **/
    @ApiModelProperty(required = true, value = "Embed token")
    @JsonProperty(JSON_PROPERTY_TOKEN)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public String getToken() {
        return token;
    }

    public void setToken(String token) {
        this.token = token;
    }

    public EmbedToken tokenId(UUID tokenId) {

        this.tokenId = tokenId;
        return this;
    }

    /**
     * Unique token Id. Can be used to correlate operations that use this token with
     * the generate operation through audit logs.
     * 
     * @return tokenId
     **/
    @ApiModelProperty(required = true, value = "Unique token Id. Can be used to correlate operations that use this token with the generate operation through audit logs.")
    @JsonProperty(JSON_PROPERTY_TOKEN_ID)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public UUID getTokenId() {
        return tokenId;
    }

    public void setTokenId(UUID tokenId) {
        this.tokenId = tokenId;
    }

    public EmbedToken expiration(OffsetDateTime expiration) {

        this.expiration = expiration;
        return this;
    }

    /**
     * Expiration time of token. In UTC.
     * 
     * @return expiration
     **/
    @ApiModelProperty(required = true, value = "Expiration time of token. In UTC.")
    @JsonProperty(JSON_PROPERTY_EXPIRATION)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public OffsetDateTime getExpiration() {
        return expiration;
    }

    public void setExpiration(OffsetDateTime expiration) {
        this.expiration = expiration;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmbedToken embedToken = (EmbedToken) o;
        return Objects.equals(this.token, embedToken.token) && Objects.equals(this.tokenId, embedToken.tokenId)
                && Objects.equals(this.expiration, embedToken.expiration);
    }

    @Override
    public int hashCode() {
        return Objects.hash(token, tokenId, expiration);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class EmbedToken {\n");
        sb.append("    token: ").append(toIndentedString(token)).append("\n");
        sb.append("    tokenId: ").append(toIndentedString(tokenId)).append("\n");
        sb.append("    expiration: ").append(toIndentedString(expiration)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
