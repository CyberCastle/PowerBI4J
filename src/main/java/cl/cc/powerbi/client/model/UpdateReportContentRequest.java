/*
 * Power BI Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package cl.cc.powerbi.client.model;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;

/**
 * Power BI update report content request
 */
@ApiModel(description = "Power BI update report content request")
@JsonPropertyOrder({ UpdateReportContentRequest.JSON_PROPERTY_SOURCE_TYPE,
        UpdateReportContentRequest.JSON_PROPERTY_SOURCE_REPORT })

public class UpdateReportContentRequest {
    /**
     * The source type for the content update.
     */
    public enum SourceTypeEnum {
        EXISTINGREPORT("ExistingReport");

        private String value;

        SourceTypeEnum(String value) {
            this.value = value;
        }

        @JsonValue
        public String getValue() {
            return value;
        }

        @Override
        public String toString() {
            return String.valueOf(value);
        }

        @JsonCreator
        public static SourceTypeEnum fromValue(String value) {
            for (SourceTypeEnum b : SourceTypeEnum.values()) {
                if (b.value.equals(value)) {
                    return b;
                }
            }
            throw new IllegalArgumentException("Unexpected value '" + value + "'");
        }
    }

    public static final String JSON_PROPERTY_SOURCE_TYPE = "sourceType";
    private SourceTypeEnum sourceType;

    public static final String JSON_PROPERTY_SOURCE_REPORT = "sourceReport";
    private SourceReport sourceReport;

    public UpdateReportContentRequest sourceType(SourceTypeEnum sourceType) {

        this.sourceType = sourceType;
        return this;
    }

    /**
     * The source type for the content update.
     * 
     * @return sourceType
     **/
    @ApiModelProperty(required = true, value = "The source type for the content update.")
    @JsonProperty(JSON_PROPERTY_SOURCE_TYPE)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SourceTypeEnum getSourceType() {
        return sourceType;
    }

    public void setSourceType(SourceTypeEnum sourceType) {
        this.sourceType = sourceType;
    }

    public UpdateReportContentRequest sourceReport(SourceReport sourceReport) {

        this.sourceReport = sourceReport;
        return this;
    }

    /**
     * Get sourceReport
     * 
     * @return sourceReport
     **/
    @ApiModelProperty(required = true, value = "")
    @JsonProperty(JSON_PROPERTY_SOURCE_REPORT)
    @JsonInclude(value = JsonInclude.Include.ALWAYS)

    public SourceReport getSourceReport() {
        return sourceReport;
    }

    public void setSourceReport(SourceReport sourceReport) {
        this.sourceReport = sourceReport;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateReportContentRequest updateReportContentRequest = (UpdateReportContentRequest) o;
        return Objects.equals(this.sourceType, updateReportContentRequest.sourceType)
                && Objects.equals(this.sourceReport, updateReportContentRequest.sourceReport);
    }

    @Override
    public int hashCode() {
        return Objects.hash(sourceType, sourceReport);
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class UpdateReportContentRequest {\n");
        sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
        sb.append("    sourceReport: ").append(toIndentedString(sourceReport)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(java.lang.Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

}
